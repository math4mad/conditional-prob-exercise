{
  "hash": "c06c89b95d1a286e4dd72e972e7d5ffa",
  "result": {
    "markdown": "---\ntitle: 1. question\n---\n\n\n\n:::{.callout-note title=\"Question\"}\n   a bag of marbles with\n   4 white, \n   8 blue\n   6 red marbles. \n   Â¶ÇÊûúÂèñÂá∫Á¨¨‰∏ÄÊ¨°ÂèñÂá∫ÁöÑÁöÑÊòØÁôΩÁêÉ, Á¨¨‰∫åÊ¨°ÂèñÂá∫ÁôΩÁêÉÁöÑÊ¶ÇÁéá\n:::\n\n### 2. Ê¶ÇÁéáË∑ØÂæÑÂõæ\n\n```{mermaid}\n%%| fig-width: 6.5\nflowchart LR\n     Bag[(\"‚ö™Ô∏è:4\\nüîµ:8\\n üî¥:6 \\n \" )]\n     Bag2[(\"‚ö™Ô∏è:4\\nüîµ:8\\n üî¥:5 \\n \" )]\n     Bag-->Bag2\n     Bag-->Pickup(\"üî¥\")\n     Bag2==w:4/17==>White2(\"‚ö™Ô∏è\")\n     Bag2==b:8/17==>Blue2(\"üîµ\")\n     Bag2==r:5/17==>Red2(\"üî¥\")\n```\n\n\n## 3. turing modeling\n\n### 3.1 define model \n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing Turing\n    include(\"utils.jl\")\n\n    @model function bag_of_marbles(start::Array{Int}=[4,8,6],first::Int=1)\n\n        white = 1\n        blue  = 2\n        red   = 3\n        colors = [white,blue,red]\n\n        draw0 ~ Categorical(simplex([start[white],start[blue],start[red]]))\n        if draw0 == first\n            draw1 ~ Categorical(simplex([start[white]-1,start[blue],start[red]]))\n        elseif draw0==first\n            draw1 ~ Categorical(simplex([start[white],start[blue]-1,start[red]]))\n        else\n            # red\n            draw1 ~ Categorical([start[white],start[blue],start[red]-1]|>simplex);\n        end\n\n        true ~ Dirac(draw0 == first)\n\n    end\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nbag_of_marbles (generic function with 8 methods)\n```\n:::\n:::\n\n\n### 3.2  MCMC Sampling\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n    \"white=4,blue=8,red=6\"\n    init=[4,8,6]\n    \"1:Á¨¨‰∏ÄÊ¨°ÂèñÁôΩÁêÉ, 2:Á¨¨‰∏ÄÊ¨°ÂèñËìùËâ≤ÁêÉ,3, Á¨¨‰∏ÄÊ¨°Á∫¢Ëâ≤ÁêÉ\"\n    first_pickup=1\n    model = bag_of_marbles(init,first_pickup)\n    num_chns = 4\n    chns = sample(model, MH(), 10_000)\n    display(chns)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\rSampling:  91%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñé   |  ETA: 0:00:00\rSampling: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| Time: 0:00:00\n```\n:::\n\n::: {.cell-output .cell-output-display}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Chains MCMC chain (10000√ó3√ó1 Array{Float64, 3}):\nIterations        = 1:1:10000\nNumber of chains  = 1\nSamples per chain = 10000\nWall duration     = 0.41 seconds\nCompute duration  = 0.41 seconds\nparameters        = draw0, draw1\ninternals         = lp\nSummary Statistics\n <span class=\"ansi-bold\"> parameters </span> <span class=\"ansi-bold\">    mean </span> <span class=\"ansi-bold\">     std </span> <span class=\"ansi-bold\"> naive_se </span> <span class=\"ansi-bold\">    mcse </span> <span class=\"ansi-bold\">       ess </span> <span class=\"ansi-bold\">    rhat </span> <span class=\"ansi-bold\"> </span> ‚ãØ\n <span class=\"ansi-bright-black-fg\">     Symbol </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\">  Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\">   Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> </span> ‚ãØ\n       draw0    1.0011    0.0331     0.0003    0.0011    836.9041    1.0010    ‚ãØ\n       draw1    2.1272    0.7064     0.0071    0.0203   1004.1686    1.0004    ‚ãØ\n<span class=\"ansi-cyan-fg\">                                                                1 column omitted</span>\nQuantiles\n <span class=\"ansi-bold\"> parameters </span> <span class=\"ansi-bold\">    2.5% </span> <span class=\"ansi-bold\">   25.0% </span> <span class=\"ansi-bold\">   50.0% </span> <span class=\"ansi-bold\">   75.0% </span> <span class=\"ansi-bold\">   97.5% </span>\n <span class=\"ansi-bright-black-fg\">     Symbol </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span>\n       draw0    1.0000    1.0000    1.0000    1.0000    1.0000\n       draw1    1.0000    2.0000    2.0000    3.0000    3.0000\n</pre>\n```\n:::\n\n:::\n:::\n\n\n### 3.3 results\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nshow_var_dist_pct(chns,:draw0,[\"white\",\"blue\",\"red\"])\nprintln(\"\\ndraw1: The probability of drawing white is the probability for 1.0\")\nshow_var_dist_pct(chns,:draw1,[\"white\",\"blue\",\"red\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDistributions of variable draw0\nwhite      =>    9989  (0.998900)\nblue       =>      11  (0.001100)\n\ndraw1: The probability of drawing white is the probability for 1.0\nDistributions of variable draw1\nblue       =>    4848  (0.484800)\nred        =>    3212  (0.321200)\nwhite      =>    1940  (0.194000)\n```\n:::\n:::\n\n\n",
    "supporting": [
      "2-bag-of-marbles_files"
    ],
    "filters": [],
    "includes": {}
  }
}