{
  "hash": "8a6cc06078608c3c1793e25452a0397b",
  "result": {
    "markdown": "---\ntitle: 1. question\n---\n\n\n >有三个骰子,红,黄,蓝(R,Y,B)\n\n   - (a) 三个骰子点数都不同的概率\n   - (b) 在(a) 的条件下,`B<Y<R` 的 概率\n   - (c) `P(B<Y<R)`\n\n## 2. workflow \n::: {.callout-note}\n构建全概率空间,然后根据条件筛选(过滤)出符合条件的项,概率就是容量的比值,计算式中分母表示\n条件的概率空间,分子表示在条件概率空间下筛选出的更小的概率空间. 不失一般性, 全概率空间也可以\n出现在分母中\n:::\n### 2.1  构建全概率空间,并计算 `size`\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\ntotal_space=[[blue,yellow,red] for blue in 1:6, yellow in 1:6,red in 1:6]\ntotal_size=length(total_space)\n\"全样本容量\"=>total_size\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n\"全样本容量\" => 216\n```\n:::\n:::\n\n\n### 2.2 计算三枚骰子点数都不同的概率\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n  cond(arr::Array)::Bool=(arr[1]!=arr[2])&&(arr[1]!=arr[3])&&(arr[2]!=arr[3])\n  diff=filter(cond,vec(total_space))\n  \n  \"三枚骰子点数都不同的概率\"=>length(diff)//total_size\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n\"三枚骰子点数都不同的概率\" => 5//9\n```\n:::\n:::\n\n\n### 2.3 在 2.2条件下计算`B<Y<R` 的 概率\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\ncond2(arr::Array)::Bool=arr[1]<arr[2]<arr[3]\ndiff2=filter(cond2,diff)\n\"三枚骰子点数都不同的条件下,点数Y<B<R的概率\"=>length(diff2)//length(diff)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n\"三枚骰子点数都不同的条件下,点数Y<B<R的概率\" => 1//6\n```\n:::\n:::\n\n\n### 2.4  在全概率空间下计算`B<Y<R` 的 概率\n筛选条件不变,但空间是全概率空间\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\ndiff3=filter(cond2,vec(total_space))\n\"点数Y<B<R的概率\"=>length(diff3)//total_size\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n\"点数Y<B<R的概率\" => 5//54\n```\n:::\n:::\n\n\n### total space\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\ndisplay(total_space)\n```\n\n::: {.cell-output .cell-output-display}\n```\n6×6×6 Array{Vector{Int64}, 3}:\n[:, :, 1] =\n [1, 1, 1]  [1, 2, 1]  [1, 3, 1]  [1, 4, 1]  [1, 5, 1]  [1, 6, 1]\n [2, 1, 1]  [2, 2, 1]  [2, 3, 1]  [2, 4, 1]  [2, 5, 1]  [2, 6, 1]\n [3, 1, 1]  [3, 2, 1]  [3, 3, 1]  [3, 4, 1]  [3, 5, 1]  [3, 6, 1]\n [4, 1, 1]  [4, 2, 1]  [4, 3, 1]  [4, 4, 1]  [4, 5, 1]  [4, 6, 1]\n [5, 1, 1]  [5, 2, 1]  [5, 3, 1]  [5, 4, 1]  [5, 5, 1]  [5, 6, 1]\n [6, 1, 1]  [6, 2, 1]  [6, 3, 1]  [6, 4, 1]  [6, 5, 1]  [6, 6, 1]\n\n[:, :, 2] =\n [1, 1, 2]  [1, 2, 2]  [1, 3, 2]  [1, 4, 2]  [1, 5, 2]  [1, 6, 2]\n [2, 1, 2]  [2, 2, 2]  [2, 3, 2]  [2, 4, 2]  [2, 5, 2]  [2, 6, 2]\n [3, 1, 2]  [3, 2, 2]  [3, 3, 2]  [3, 4, 2]  [3, 5, 2]  [3, 6, 2]\n [4, 1, 2]  [4, 2, 2]  [4, 3, 2]  [4, 4, 2]  [4, 5, 2]  [4, 6, 2]\n [5, 1, 2]  [5, 2, 2]  [5, 3, 2]  [5, 4, 2]  [5, 5, 2]  [5, 6, 2]\n [6, 1, 2]  [6, 2, 2]  [6, 3, 2]  [6, 4, 2]  [6, 5, 2]  [6, 6, 2]\n\n[:, :, 3] =\n [1, 1, 3]  [1, 2, 3]  [1, 3, 3]  [1, 4, 3]  [1, 5, 3]  [1, 6, 3]\n [2, 1, 3]  [2, 2, 3]  [2, 3, 3]  [2, 4, 3]  [2, 5, 3]  [2, 6, 3]\n [3, 1, 3]  [3, 2, 3]  [3, 3, 3]  [3, 4, 3]  [3, 5, 3]  [3, 6, 3]\n [4, 1, 3]  [4, 2, 3]  [4, 3, 3]  [4, 4, 3]  [4, 5, 3]  [4, 6, 3]\n [5, 1, 3]  [5, 2, 3]  [5, 3, 3]  [5, 4, 3]  [5, 5, 3]  [5, 6, 3]\n [6, 1, 3]  [6, 2, 3]  [6, 3, 3]  [6, 4, 3]  [6, 5, 3]  [6, 6, 3]\n\n[:, :, 4] =\n [1, 1, 4]  [1, 2, 4]  [1, 3, 4]  [1, 4, 4]  [1, 5, 4]  [1, 6, 4]\n [2, 1, 4]  [2, 2, 4]  [2, 3, 4]  [2, 4, 4]  [2, 5, 4]  [2, 6, 4]\n [3, 1, 4]  [3, 2, 4]  [3, 3, 4]  [3, 4, 4]  [3, 5, 4]  [3, 6, 4]\n [4, 1, 4]  [4, 2, 4]  [4, 3, 4]  [4, 4, 4]  [4, 5, 4]  [4, 6, 4]\n [5, 1, 4]  [5, 2, 4]  [5, 3, 4]  [5, 4, 4]  [5, 5, 4]  [5, 6, 4]\n [6, 1, 4]  [6, 2, 4]  [6, 3, 4]  [6, 4, 4]  [6, 5, 4]  [6, 6, 4]\n\n[:, :, 5] =\n [1, 1, 5]  [1, 2, 5]  [1, 3, 5]  [1, 4, 5]  [1, 5, 5]  [1, 6, 5]\n [2, 1, 5]  [2, 2, 5]  [2, 3, 5]  [2, 4, 5]  [2, 5, 5]  [2, 6, 5]\n [3, 1, 5]  [3, 2, 5]  [3, 3, 5]  [3, 4, 5]  [3, 5, 5]  [3, 6, 5]\n [4, 1, 5]  [4, 2, 5]  [4, 3, 5]  [4, 4, 5]  [4, 5, 5]  [4, 6, 5]\n [5, 1, 5]  [5, 2, 5]  [5, 3, 5]  [5, 4, 5]  [5, 5, 5]  [5, 6, 5]\n [6, 1, 5]  [6, 2, 5]  [6, 3, 5]  [6, 4, 5]  [6, 5, 5]  [6, 6, 5]\n\n[:, :, 6] =\n [1, 1, 6]  [1, 2, 6]  [1, 3, 6]  [1, 4, 6]  [1, 5, 6]  [1, 6, 6]\n [2, 1, 6]  [2, 2, 6]  [2, 3, 6]  [2, 4, 6]  [2, 5, 6]  [2, 6, 6]\n [3, 1, 6]  [3, 2, 6]  [3, 3, 6]  [3, 4, 6]  [3, 5, 6]  [3, 6, 6]\n [4, 1, 6]  [4, 2, 6]  [4, 3, 6]  [4, 4, 6]  [4, 5, 6]  [4, 6, 6]\n [5, 1, 6]  [5, 2, 6]  [5, 3, 6]  [5, 4, 6]  [5, 5, 6]  [5, 6, 6]\n [6, 1, 6]  [6, 2, 6]  [6, 3, 6]  [6, 4, 6]  [6, 5, 6]  [6, 6, 6]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "afcp-ex3.22_files"
    ],
    "filters": [],
    "includes": {}
  }
}