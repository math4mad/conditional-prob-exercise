{
  "hash": "2cb7a9205378c423b02b2a7c031bcbb1",
  "result": {
    "markdown": "---\ntitle: 1. question\n---\n\n\n\n:::{.callout-note}\nfrom hakank-bayes-code\n\nUrns and balls\n\nurn1 contains 40 blue balls and 20 red balls \nurn2 contains 25 blue balls and 30 red balls.\n\nthrow a fair coin to descide to choos which urn, head for urn1, tail for urn2\n\"What is the probability of drawing a blue ball?\"\n\nThe exact answer of drawing a blue call is\n0.540/60 + 0.525/55 = 0.56060606060606060606\n:::\n\n###  Ê¶ÇÁéáË∑ØÂæÑÂõæ\n\n\n```{mermaid}\n%%| fig-width: 6.5\nflowchart LR\n     A[\"ü™ô\"]\n     Urn1[(\"üîµ:40\\n üî¥:20\")]\n     Urn2[(\" üîµ:25\\n üî¥:30\")]\n    A==h1:1/2==>Urn1\n    A==t1:1/2==>Urn2\n    Urn1==h1b2:40/60==>h1b2(\"üîµ\")\n    Urn1==h1r2:20/60==>h1r2(\"üî¥\")\n    Urn2==t1b2:25/55==>t1b2(\"üîµ\")\n    Urn2==t1r2:30/55==>t1r2(\"üî¥\")\n```\n\n\n### 3.  turing model\n\n#### 3.1 define model\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n    using Turing,Distributions\n    include(\"./utils.jl\")\n    \n\n    @model function urns_and_balls()\n        tail = 1\n        head = 2\n        coin ~ Categorical(simplex([0.5,0.5]))\n        \n        blue = 1\n        red = 2\n        urn1=Categorical(simplex([40,20]))\n        urn2=Categorical(simplex([25,30]))\n        draw ~ coin == head ? urn1 : urn2 \n    end\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nurns_and_balls (generic function with 2 methods)\n```\n:::\n:::\n\n\n#### 3.2 mcmc sampling\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n    model = urns_and_balls()\n    chns = sample(model, IS(), 40_000)\n    display(chns)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\rSampling:   6%|‚ñà‚ñà‚ñå                                      |  ETA: 0:00:02\rSampling:  42%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç                       |  ETA: 0:00:02\rSampling:  54%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè                  |  ETA: 0:00:01\rSampling:  60%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç                |  ETA: 0:00:01\rSampling:  66%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñâ              |  ETA: 0:00:01\rSampling:  71%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè           |  ETA: 0:00:01\rSampling:  76%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç         |  ETA: 0:00:01\rSampling:  82%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñã       |  ETA: 0:00:00\rSampling:  88%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    |  ETA: 0:00:00\rSampling:  94%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  |  ETA: 0:00:00\rSampling: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä|  ETA: 0:00:00\rSampling: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| Time: 0:00:02\n```\n:::\n\n::: {.cell-output .cell-output-display}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Chains MCMC chain (40000√ó3√ó1 Array{Float64, 3}):\nLog evidence      = 0.0\nIterations        = 1:1:40000\nNumber of chains  = 1\nSamples per chain = 40000\nWall duration     = 4.87 seconds\nCompute duration  = 4.87 seconds\nparameters        = coin, draw\ninternals         = lp\nSummary Statistics\n <span class=\"ansi-bold\"> parameters </span> <span class=\"ansi-bold\">    mean </span> <span class=\"ansi-bold\">     std </span> <span class=\"ansi-bold\"> naive_se </span> <span class=\"ansi-bold\">    mcse </span> <span class=\"ansi-bold\">        ess </span> <span class=\"ansi-bold\">    rhat </span>  ‚ãØ\n <span class=\"ansi-bright-black-fg\">     Symbol </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\">  Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\">    Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span>  ‚ãØ\n        coin    1.5025    0.5000     0.0025    0.0025   40177.7494    1.0000   ‚ãØ\n        draw    1.4401    0.4964     0.0025    0.0024   40910.0832    1.0000   ‚ãØ\n<span class=\"ansi-cyan-fg\">                                                                1 column omitted</span>\nQuantiles\n <span class=\"ansi-bold\"> parameters </span> <span class=\"ansi-bold\">    2.5% </span> <span class=\"ansi-bold\">   25.0% </span> <span class=\"ansi-bold\">   50.0% </span> <span class=\"ansi-bold\">   75.0% </span> <span class=\"ansi-bold\">   97.5% </span>\n <span class=\"ansi-bright-black-fg\">     Symbol </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span>\n        coin    1.0000    1.0000    2.0000    2.0000    2.0000\n        draw    1.0000    1.0000    1.0000    2.0000    2.0000\n</pre>\n```\n:::\n\n:::\n:::\n\n\n#### 3.3 results\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n    show_var_dist_pct(chns,:draw,[\"blue\",\"red\"])\n    show_var_dist_pct(chns,:coin,[\"tail\",\"head\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDistributions of variable draw\nblue       =>   22395  (0.559875)\nred        =>   17605  (0.440125)\nDistributions of variable coin\nhead       =>   20099  (0.502475)\ntail       =>   19901  (0.497525)\n```\n:::\n:::\n\n\n",
    "supporting": [
      "1-urn-ball_files"
    ],
    "filters": [],
    "includes": {}
  }
}