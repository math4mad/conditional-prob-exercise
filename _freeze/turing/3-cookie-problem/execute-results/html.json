{
  "hash": "577fc029a28a3525a9fad39d38cfcbe3",
  "result": {
    "markdown": "---\n title: \"3-cookie-problem\"\n---\n\n## 1. question\n:::{.callout-note title=\"Question\"}\n  Suppose there are two bowls of cookies. \n  Bowl 1 contains 30 vanilla cookies and 10 chocolate cookies. \n  Bowl 2 contains 20 of each.\n\n  Now suppose you choose one of the bowls at random and, without looking,\n  select a cookie at random. The cookie is vanilla. \n  What is the probability that it came from Bowl 1?\n  \"\"\"\n:::\n\n## 2. 概率路径图\n 根据介绍,绘出概率路径图\n\n```{mermaid}\n        %%| fig-width: 6.5\n        flowchart LR\n        Bowl([bowl])==b1:1/2==>bowl1[(\"vanilla cookies:30 \\n chocolate cookies:10\")]\n        Bowl==b2:1/2==>bowl2[(\"vanilla cookies:20 \\n chocolate cookies:20\")]\n        bowl1==b1v2:3/4==>vanillacookies1(\"vanilla cookies\")\n        bowl1==b1c2:1/4==>chocolatecookies1(\"chocolate cookies\")\n        bowl2==b2v2:1/2==>vanillacookies2(\"vanilla cookies\") \n        bowl2==b2c2:1/2==>chocolatecookies2(\"chocolate cookies\")\n        classDef plain fill:#ddd,stroke:#fff,stroke-width:4px,color:#000;\n        class bowl plain;\n```\n\n\n### 3.条件概率\n### 3.1  取出的是香草味(\"vanilla\")\n有两条路径\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nb1=1//2;b1v2=3//4;b1c2=1//4\nb2=1//2;b2v2=1//2;b2c2=1//2\np1=b1*b1v2\np2=b2*b2v2 \npv=p1+p2\n@info \"取出的vanilla cookie 来自第一个bowl的概率\"=>p1/pv\n@info \"取出的vanilla cookie 来自第二个bowl的概率\"=>p2/pv\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[ Info: \"取出的vanilla cookie 来自第一个bowl的概率\" => 3//5\n[ Info: \"取出的vanilla cookie 来自第二个bowl的概率\" => 2//5\n```\n:::\n:::\n\n\n### 3.2 取出的是巧克力味(\"chocolate\")\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n    p3=b1*b1c2\n    p4=b2*b2c2\n    pc=p3+p4\n    @info \"取出的chocolate cookie来自第一个bowl的概率\"=>p3/pc\n    @info \"取出的chocolate cookie来自第二个bowl的概率\"=>p4/pc\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[ Info: \"取出的chocolate cookie来自第一个bowl的概率\" => 1//3\n[ Info: \"取出的chocolate cookie来自第二个bowl的概率\" => 2//3\n```\n:::\n:::\n\n\n## 4. turing modeling\n\n### 4.1 define model \n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n    include(\"./utils.jl\")\n    using Turing\n\n    \"pickup 取出的 cookie, 1: vanilla,2: chocolate\"\n    @model function cookie_problem(pickup::Int=1)\n        vanilla = 1\n        chocolate = 2\n        \n        bowl1 = 1\n        bowl2 = 2\n        \n        bowl ~ DiscreteUniform(bowl1,bowl2)\n        cookie ~ (bowl == bowl1) ? Categorical(simplex([30,10])) : \n                                Categorical(simplex([20,20]))\n        true ~ Dirac(cookie == pickup)\n\n    end\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\ncookie_problem\n```\n:::\n:::\n\n\n### 4.2 MCMC-取出的是香草味(\"vanilla\") cookie\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n    model = cookie_problem(1)\n    num_chains = 4\n    chns = sample(model, MH(), 10_000)\n    display(chns)\n```\n\n::: {.cell-output .cell-output-display}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Chains MCMC chain (10000×3×1 Array{Float64, 3}):\nIterations        = 1:1:10000\nNumber of chains  = 1\nSamples per chain = 10000\nWall duration     = 0.34 seconds\nCompute duration  = 0.34 seconds\nparameters        = bowl, cookie\ninternals         = lp\nSummary Statistics\n <span class=\"ansi-bold\"> parameters </span> <span class=\"ansi-bold\">    mean </span> <span class=\"ansi-bold\">     std </span> <span class=\"ansi-bold\"> naive_se </span> <span class=\"ansi-bold\">    mcse </span> <span class=\"ansi-bold\">       ess </span> <span class=\"ansi-bold\">    rhat </span> <span class=\"ansi-bold\"> </span> ⋯\n <span class=\"ansi-bright-black-fg\">     Symbol </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\">  Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\">   Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> </span> ⋯\n        bowl    1.3935    0.4886     0.0049    0.0073   4310.1406    0.9999    ⋯\n      cookie    1.0000    0.0000     0.0000    0.0000         NaN       NaN    ⋯\n<span class=\"ansi-cyan-fg\">                                                                1 column omitted</span>\nQuantiles\n <span class=\"ansi-bold\"> parameters </span> <span class=\"ansi-bold\">    2.5% </span> <span class=\"ansi-bold\">   25.0% </span> <span class=\"ansi-bold\">   50.0% </span> <span class=\"ansi-bold\">   75.0% </span> <span class=\"ansi-bold\">   97.5% </span>\n <span class=\"ansi-bright-black-fg\">     Symbol </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span>\n        bowl    1.0000    1.0000    1.0000    2.0000    2.0000\n      cookie    1.0000    1.0000    1.0000    1.0000    1.0000\n</pre>\n```\n:::\n\n:::\n:::\n\n\n### 4.3 香草味(\"vanilla\")-results\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\n    show_var_dist_pct(chns, :bowl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDistributions of variable bowl (num:0)\n1.00000 =>    6065  (0.606500)\n2.00000 =>    3935  (0.393500)\n```\n:::\n:::\n\n\n### 4.4 取出的是巧克力味(\"chocolate\") cookie\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\n    model2 = cookie_problem(2)\n    chns2 = sample(model2, MH(), 10_000)\n    display(chns2)\n    show_var_dist_pct(chns2, :bowl)\n```\n\n::: {.cell-output .cell-output-display}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Chains MCMC chain (10000×3×1 Array{Float64, 3}):\nIterations        = 1:1:10000\nNumber of chains  = 1\nSamples per chain = 10000\nWall duration     = 0.1 seconds\nCompute duration  = 0.1 seconds\nparameters        = bowl, cookie\ninternals         = lp\nSummary Statistics\n <span class=\"ansi-bold\"> parameters </span> <span class=\"ansi-bold\">    mean </span> <span class=\"ansi-bold\">     std </span> <span class=\"ansi-bold\"> naive_se </span> <span class=\"ansi-bold\">    mcse </span> <span class=\"ansi-bold\">       ess </span> <span class=\"ansi-bold\">    rhat </span> <span class=\"ansi-bold\"> </span> ⋯\n <span class=\"ansi-bright-black-fg\">     Symbol </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\">  Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\">   Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> </span> ⋯\n        bowl    1.6686    0.4707     0.0047    0.0092   2053.5132    0.9999    ⋯\n      cookie    2.0000    0.0000     0.0000    0.0000         NaN       NaN    ⋯\n<span class=\"ansi-cyan-fg\">                                                                1 column omitted</span>\nQuantiles\n <span class=\"ansi-bold\"> parameters </span> <span class=\"ansi-bold\">    2.5% </span> <span class=\"ansi-bold\">   25.0% </span> <span class=\"ansi-bold\">   50.0% </span> <span class=\"ansi-bold\">   75.0% </span> <span class=\"ansi-bold\">   97.5% </span>\n <span class=\"ansi-bright-black-fg\">     Symbol </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span>\n        bowl    1.0000    1.0000    2.0000    2.0000    2.0000\n      cookie    2.0000    2.0000    2.0000    2.0000    2.0000\n</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nDistributions of variable bowl (num:0)\n2.00000 =>    6686  (0.668600)\n1.00000 =>    3314  (0.331400)\n```\n:::\n:::\n\n\n",
    "supporting": [
      "3-cookie-problem_files"
    ],
    "filters": [],
    "includes": {}
  }
}