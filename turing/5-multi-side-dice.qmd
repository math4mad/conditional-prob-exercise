---
title: "5-multi-side-dice"
author: math4mad
code-fold: true
---

:::{.callout-note title="简介"}

  骰子有很多面的类型 @fig-1
 
  参考 hakank-bayes-code  dice_problem

  问题: 如果一个袋子内有 4面,6 面, 8 面, 12 面, 20面的骰子. 

  1. 如果一个人从袋子内随机取出一枚骰子, 告诉你扔出点数为 $6$, 根据点数判断是哪个骰子
  2. 如果结果是 [ 6, 8, 7, 7, 5,4] 那么最有可能的是哪个骰子
:::
![多面骰子](./imgs/dice.jpeg){#fig-1 width=300}


## 1. 通过概率路径图的计算
### 1.1 概率路径图

```{mermaid}
    %%| fig-width: 6.5
    %%| label: fig-2
    %%| fig-cap: "bags-flowchart"
    flowchart LR
    Dice["Multi-Dice"]
    Dice==1/5==>f4("4-faces")
    Dice==1/5==>f6("6-faces")
    Dice==1/5==>f8("8-faces")
    Dice==1/5==>f12("12-faces")
    Dice==1/5==>f20("20-faces")

    f4==0==>f46("6️⃣")
    f6==1/6==>f66("6️⃣")
    f8==1/8==>f86("6️⃣")
    f12==1/12==>f126("6️⃣")
    f20==1/20==>f206("6️⃣")
```

### 1.2  计算单次点数概率

```{julia}
using Distributions,DataFrames

dice_faces=[4,6,8,12,20]

"取出每个骰子的概率数组"
dice_prob=fill(1//5,5)

df=DataFrame(name=String[],d4=Float64[],d6=Float64[],
   d8=Float64[],d12=Float64[],d20=Float64[]
)
function  dp_arr(num::Int)
  arr=Rational[]
  for idx in eachindex(dice_faces)
      res = num <= dice_faces[idx] ? (1//dice_faces[idx]) : 0
      push!(arr,res)
      
  end 
  total=sum(arr)
  temp= ([i//total for i in arr])|>(d->Float64.(d))|>d->round.(d,digits=2)
  
  return temp 
end

for idx  in 1:20
  temp=dp_arr(idx)
  #@info "点数为$idx,各骰子的概率"=>arr

  push!(df,(name="点数:$idx",d4=temp[1],d6=temp[2],d8=temp[3],
     d12=temp[4],d20=temp[5]
  ))
end
df
```

### 1.2  计算多次抛掷概率

> 例:当 结果为[6, 6, 8, 7, 7, 5, 4] 时各骰子的概率

```{julia}

"dice 概率 数组 2"
function  dp_arr(nums::Array{Int})

  arr=Rational[]
  for idx in eachindex(dice_faces)
      res = mapreduce(x-> x<= dice_faces[idx] ? (1//dice_faces[idx]) : 0, *, nums)
      
      push!(arr,res)
      
  end 
  
  total=sum(arr)
  return ([i//total for i in arr])|>(d->Float64.(d))|>d->round.(d,digits=2)
  
end

res=[[6, 6],[6, 6, 8],[6, 6, 8, 7],[6, 6, 8, 7, 7],[6, 6, 8, 7, 7, 5],
     [6, 6, 8, 7, 7, 5, 4], [6, 6, 8, 7, 7, 5, 4, 11]]

#res=dp_arr2([6, 6, 8, 7, 7, 5, 4])
#= res-dp_arr2([6, 6, 8, 7])
Dict("dice-$(dice_faces[idx])" =>res[idx]  for  idx in eachindex(dice_faces)) =#

df2=DataFrame(name=String[],d4=Float64[],d6=Float64[],
   d8=Float64[],d12=Float64[],d20=Float64[]
)

for  r in res

 arr=prob_res=dp_arr(r)
#  arr=Dict("$(dice_faces[idx])"=>prob_res[idx]  for  idx in eachindex(dice_faces)) 
 #arr=[prob_res[idx]  for  idx in eachindex(dice_faces)]
 #@info  "$r "=>arr
 push!(df2,(name="$(r)",d4=arr[1],d6=arr[2],d8=arr[3],d12=arr[4],d20=arr[5]))
end

df2
```


